package es.powdergamers.bospawns;

import java.util.ArrayList;
import java.util.Random;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.block.Biome;
import org.bukkit.block.Block;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.entity.CreatureSpawnEvent;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.event.entity.FoodLevelChangeEvent;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerPickupItemEvent;
import org.bukkit.inventory.EntityEquipment;
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import pgDev.bukkit.DisguiseCraft.DisguiseCraft;
import pgDev.bukkit.DisguiseCraft.api.DisguiseCraftAPI;
import pgDev.bukkit.DisguiseCraft.disguise.Disguise;
import pgDev.bukkit.DisguiseCraft.disguise.DisguiseType;

public class BoSpawns extends JavaPlugin implements Listener
{
	DisguiseCraftAPI dcAPI;
	public static Plugin BoSpawns;
   
	public void setupDisguiseCraft()  
	{   
		this.dcAPI = DisguiseCraft.getAPI(); 
	}
  
  public void onEnable()
  {
	
    getServer().getPluginManager().registerEvents(this, this);
    setupDisguiseCraft();
    getServer().getScheduler().scheduleSyncDelayedTask(this, new Runnable()
    {
      public void run()
      {
        BoSpawns.this.zombie();
      }
    }, 1L);
  }
  
  public void zombie()
  {
    Player[] p = Bukkit.getServer().getOnlinePlayers();
    for (int i = 0; i < p.length; i++) {
      if (p[i].hasPermission("zombie.*"))
      {
        if (!p[i].hasPotionEffect(PotionEffectType.SPEED)) {
          p[i].addPotionEffect(new PotionEffect(
            PotionEffectType.SPEED, 2147483647, 1));
        }
        if ((p[i].getWorld().getBlockAt(p[i].getLocation()).getLightFromSky() >= 13) && (p[i].getWorld().getTime() >= 0L) && (p[i].getWorld().getTime() <= 12500L)) {
          if (p[i].getInventory().getHelmet() != null)
          {
            if (p[i].getInventory().getHelmet().getType() != Material.CHAINMAIL_HELMET)
            {
              p[i].getInventory().getHelmet().setDurability((short)(p[i].getInventory().getHelmet().getDurability() + 2));
              if (p[i].getInventory().getHelmet().getDurability() >= p[i].getInventory().getHelmet().getType().getMaxDurability())
              {
                ItemStack aire = new ItemStack(Material.AIR);
                p[i].getInventory().setHelmet(aire);
              }
            }
            p[i].updateInventory();
          }
          else
          {
            p[i].setFireTicks(100);
          }
        }
      }
    }
    getServer().getScheduler().scheduleSyncDelayedTask(this, new Runnable()
    {
      public void run()
      {
        BoSpawns.this.zombie();
      }
    }, 60L);
  }
  
  @EventHandler
  public void onPlayerJoin(PlayerJoinEvent event)
  {
    DisguiseCraftAPI api = DisguiseCraft.getAPI();
    Disguise zombie = new Disguise(api.newEntityID(), DisguiseType.Zombie);
    Player player = event.getPlayer();
    if (player.hasPermission("zombie.*"))
    {
      DisguiseCraft.getAPI().disguisePlayer(player, zombie.clone());
      if (!player.hasPotionEffect(PotionEffectType.SPEED)) {
        player.addPotionEffect(new PotionEffect(
          PotionEffectType.SPEED, 2147483647, 1));
      }
    }
    else if (player.hasPotionEffect(PotionEffectType.SPEED))
    {
      player.removePotionEffect(PotionEffectType.SPEED);
    }
  }
  
  @EventHandler
  public void onFoodChange(FoodLevelChangeEvent event)
  {
    if ((event.getEntity() instanceof Player))
    {
      Player player = (Player)event.getEntity();
      if (player.hasPermission("zombie.*")) {
        event.setCancelled(true);
      }
    }
  }
  
  @EventHandler
  public void onPlayerInteract1(PlayerInteractEvent e)
  {
    if (e.getAction() == Action.RIGHT_CLICK_BLOCK)
    {
      Block b = e.getClickedBlock();
      if (b.getType() == Material.WOODEN_DOOR)
      {
        Player player = e.getPlayer();
        if (player.hasPermission("zombie.*")) {
          e.setCancelled(true);
        }
      }
    }
  }
  
  @EventHandler
  public void drop(PlayerDropItemEvent event)
  {
    Player player = event.getPlayer();
    if (player.hasPermission("zombie.*")) {
      event.setCancelled(true);
    }
  }
  
  @EventHandler
  public void coger(PlayerPickupItemEvent event)
  {
    Player player = event.getPlayer();
    if (player.hasPermission("zombie.*")) {
      event.setCancelled(true);
    }
  }
  
  
  @EventHandler
  public void onMobDeath(EntityDeathEvent event) {
	  
	  if(event.getEntityType() == EntityType.ZOMBIE) {
		  if(event.getEntity().getKiller() instanceof Player){
			  ArrayList<ItemStack> zombieDrops = new ArrayList<ItemStack>();
			  
			  Random randomGenerator = new Random();		       	
			  int randomInt = randomGenerator.nextInt(100);
			    	
			      if(randomInt <= 10){
					  zombieDrops.add(new ItemStack(352));
					  event.getDrops().clear();
					  event.getDrops().addAll(zombieDrops);
			    	  	    
			      }
			      if(randomInt <= 20){
					  zombieDrops.add(new ItemStack(367));
					  event.getDrops().clear();
					  event.getDrops().addAll(zombieDrops);
			      
			      } else {
					  event.getDrops().clear();
			      }
			      
			  }
		  }
		  

		  event.setDroppedExp(0);
		  event.getEntity().getKiller().getPlayer().playSound(event.getEntity().getKiller().getLocation(), Sound.LEVEL_UP, 1.0F, 5.0F);

	  
  }

  
  
  
  @EventHandler(priority=EventPriority.HIGHEST)
  public void onMobSpawn(CreatureSpawnEvent event)
  {
    if (event.getEntityType() == EntityType.SLIME) {
      event.setCancelled(true);
    }
    if (event.getEntityType() == EntityType.SPIDER)
    {
      Biome biomeData = event.getEntity().getWorld().getBlockAt(event.getEntity().getLocation().getBlockX(), event.getEntity().getLocation().getBlockY() - 1, event.getEntity().getLocation().getBlockZ()).getBiome();
      if (biomeData != Biome.HELL) {
        event.setCancelled(true);
      }
    }
    if (event.getEntityType() == EntityType.SKELETON)
    {
      Biome biomeData = event.getEntity().getWorld().getBlockAt(event.getEntity().getLocation().getBlockX(), event.getEntity().getLocation().getBlockY() - 1, event.getEntity().getLocation().getBlockZ()).getBiome();
      if (biomeData != Biome.HELL) {
        event.setCancelled(true);
      }
    }
    if (event.getEntityType() == EntityType.CREEPER)
    {
      Biome biomeData = event.getEntity().getWorld().getBlockAt(event.getEntity().getLocation().getBlockX(), event.getEntity().getLocation().getBlockY() - 1, event.getEntity().getLocation().getBlockZ()).getBiome();
      if (biomeData != Biome.HELL) {
        event.setCancelled(true);
      }
    }
    if (event.getEntityType() == EntityType.WITCH)
    {
      Biome biomeData = event.getEntity().getWorld().getBlockAt(event.getEntity().getLocation().getBlockX(), event.getEntity().getLocation().getBlockY() - 1, event.getEntity().getLocation().getBlockZ()).getBiome();
      if (biomeData != Biome.HELL) {
        event.setCancelled(true);
      }
    }
    if (event.getEntityType() == EntityType.ENDERMAN)
    {
      Biome biomeData = event.getEntity().getWorld().getBlockAt(event.getEntity().getLocation().getBlockX(), event.getEntity().getLocation().getBlockY() - 1, event.getEntity().getLocation().getBlockZ()).getBiome();
      if (biomeData != Biome.HELL) {
        event.setCancelled(true);
      }
    }
    if (event.getEntityType() == EntityType.GHAST)
    {
      Biome biomeData = event.getEntity().getWorld().getBlockAt(event.getEntity().getLocation().getBlockX(), event.getEntity().getLocation().getBlockY() - 1, event.getEntity().getLocation().getBlockZ()).getBiome();
      if (biomeData == Biome.HELL) {
        event.setCancelled(true);
      }
    }
    if (event.getEntityType() == EntityType.MAGMA_CUBE)
    {
      Biome biomeData = event.getEntity().getWorld().getBlockAt(event.getEntity().getLocation().getBlockX(), event.getEntity().getLocation().getBlockY() - 1, event.getEntity().getLocation().getBlockZ()).getBiome();
      if (biomeData == Biome.HELL) {
        event.setCancelled(true);
      }
    }
    if (event.getEntityType() == EntityType.ZOMBIE)
    {
      Biome biomeData = event.getEntity().getWorld().getBlockAt(event.getEntity().getLocation().getBlockX(), event.getEntity().getLocation().getBlockY() - 1, event.getEntity().getLocation().getBlockZ()).getBiome();
      if (biomeData != Biome.HELL) {
        event.setCancelled(true);
      }
    }
    if (event.getEntityType() == EntityType.PIG_ZOMBIE)
    {
      event.setCancelled(true);
      
      LivingEntity spawnCreature = event.getLocation().getWorld().spawnCreature(event.getLocation(), EntityType.ZOMBIE);
      spawnCreature.addPotionEffect(new PotionEffect(PotionEffectType.FIRE_RESISTANCE, 2147483647, 1));
      EntityEquipment equipment = spawnCreature.getEquipment();
      equipment.setHelmet(new ItemStack(Material.JACK_O_LANTERN, 1));
      return;
    }
  }
}
